// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Roles {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  roleName    String  @unique
  description String?

  admins    Admins[]
  employees Employees[]
}

model Admins {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  fullName String
  userName String @unique
  email    String @unique
  password String
  phone    String @unique
  Roles    Roles? @relation(fields: [rolesId], references: [id])
  rolesId  Int?

  @@index([id, userName, email])
}

model Customers {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  fullName String
  email    String  @unique
  phone    String  @unique
  address  Json
  Sales    Sales[]

  @@index([email])
}

model Vendors {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name          String
  email         String @unique
  contactPerson String
  phone         String @unique
  address       Json

  purchases Purchase[]

  @@index([email])
}

model Categories {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name String @unique

  subCategories SubCategories[]
  Products      Products[]
}

model SubCategories {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name         String      @unique
  Categories   Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId Int?

  Products Products[]
}

model Products {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name String @unique @db.VarChar(540)

  Categories      Categories?    @relation(fields: [categoriesId], references: [id])
  categoriesId    Int?
  SubCategories   SubCategories? @relation(fields: [subCategoriesId], references: [id])
  subCategoriesId Int?

  variants ProductsVariant[]

  @@index([name])
}

model ProductsVariant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name          String         @unique @db.VarChar(540)
  description   Json?
  // price       Decimal
  productCode   Int            @unique
  barCode       String         @unique
  Products      Products?      @relation(fields: [productsId], references: [id], onDelete: Cascade)
  productsId    Int?
  images        Media[]
  ProductStocks ProductStocks?

  @@index([name])
}

model Media {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name String
  url  String

  ProductsVariant   ProductsVariant? @relation(fields: [productsVariantId], references: [id], onDelete: Cascade)
  productsVariantId Int?
}

model Raks {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name String
}

model Units {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name         String         @unique
  value        Int
  PurchaseItem PurchaseItem[]
}

model PurchaseItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  batchNumber          String
  purchasePrice        Decimal
  minimumSellingPrice  Decimal
  maximumRetailPrice   Decimal
  commissionPercentage Decimal
  quantity             Int

  productVariantId Int

  Units      Units?    @relation(fields: [unitsId], references: [id])
  unitsId    Int?
  Purchase   Purchase? @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId Int?

  ProductStocks ProductStocks?
}

model Purchase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  purchaseBillNo String
  date           DateTime
  totalAmount    Decimal

  purchaseItems PurchaseItem[]
  Vendors       Vendors?       @relation(fields: [vendorsId], references: [id])
  vendorsId     Int?
}

model ProductStocks {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  productVariant    ProductsVariant? @relation(fields: [productsVariantId], references: [id])
  productsVariantId Int?             @unique

  purchaseItem   PurchaseItem? @relation(fields: [purchaseItemId], references: [id])
  purchaseItemId Int?          @unique

  quantityInStock Int
}

model PurchaseReturn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  purchseItemId String
}

model Sales {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  date DateTime

  totalAmount         Decimal
  additionalDisocunt  Decimal
  totalDiscountAmount Decimal
  grandTotal          Decimal

  customer    Customers? @relation(fields: [customersId], references: [id])
  customersId Int?       @default(1)

  salesProducts SalesProducts[]

  accountant   Employees? @relation("accountant", fields: [accountantId], references: [id])
  accountantId Int?

  salesman   Employees? @relation("salesman", fields: [salesManId], references: [id])
  salesManId Int?
}

model SalesProducts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  Sales            Sales?  @relation(fields: [salesId], references: [id], onDelete: Cascade)
  salesId          Int?
  discountAmount   Decimal
  productVariantId Int
  productCode      Int
  quantity         Int
}

model SalesReturn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  salesProductId String
  customerId     String
  reason         String
}

model SalesCommission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  salesMan         Employees? @relation("salesman", fields: [salesmanId], references: [id])
  salesmanId       Int?
  saleId           Int
  saleDate         DateTime
  commissionEarned Decimal
  notes            String?
}

model Expenses {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  date       DateTime
  employeeId String
  amount     Decimal

  ExpensType   ExpensType? @relation(fields: [expensTypeId], references: [id])
  expensTypeId Int?
}

model ExpensType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name     String
  expenses Expenses[]
}

model Departments {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  name      String
  employees Employees[]
}

model Employees {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  fullName String
  userName String @unique
  email    String @unique
  password String
  phone    String @unique

  jobTitle String

  joiningDate   DateTime
  salary        Decimal
  Departments   Departments? @relation(fields: [departmentsId], references: [id])
  departmentsId Int?

  attendances Attendance[]
  Leaves      Leaves[]
  Payroll     Payroll[]
  Roles       Roles?       @relation(fields: [rolesId], references: [id])
  rolesId     Int?

  salesManSales   Sales[] @relation("salesman")
  accountantSales Sales[] @relation("accountant")

  salesCommission SalesCommission[] @relation("salesman")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  date           DateTime
  check_in_time  DateTime   @db.Time()
  check_out_time DateTime   @db.Time()
  Employees      Employees? @relation(fields: [employeesId], references: [id])
  employeesId    Int?
}

model Leaves {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  leaveType   String
  startDate   DateTime
  endDate     DateTime
  status      STATUS     @default(PENDING)
  Employees   Employees? @relation(fields: [employeesId], references: [id])
  employeesId Int?
}

enum STATUS {
  APPROVED
  PENDING
}

model Payroll {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  deleted   Boolean  @default(false)

  paymentDate DateTime
  gross_pay   Decimal
  deductions  Decimal
  netPay      Decimal

  Employees   Employees? @relation(fields: [employeesId], references: [id])
  employeesId Int?
}
